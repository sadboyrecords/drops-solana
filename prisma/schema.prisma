// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    magicSolanaAddress String?   @unique
    walletAddress      String    @unique
    accounts           Account[]
    sessions           Session[]
    dropCredits        Drop[]
    createdDrops       Drop[]    @relation("UserDrop")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Drop {
    id                 String     @id @default(uuid())
    candyMachineId     String?    @unique
    slug               String     @unique
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    isDraft            Boolean    @default(true)
    defaultStartDate   DateTime // you can have several guards with different start dates, this allows you to run queries based on drop timing
    defaultEndDate     DateTime?
    ownerWalletAddress String
    owner              User       @relation("UserDrop", fields: [ownerWalletAddress], references: [walletAddress])
    creators           User[]
    lowestPrice        Float?
    defaultPrice       Float?
    audioUri           String?
    audioIpfsHash      String?
    imageIpfsHash      String
    imageUri           String?
    jsonIpfsHash       String?
    description        String
    dropName           String
    collectionAddress  String?
    isPublic           Boolean    @default(false)
    items              Int?
    formSubmission     Json
    step               DropStep   @default(METADATA_UPLOAD)
    metadataHash       Float[]
    status             DropStatus @default(DRAFT)

    @@unique([ownerWalletAddress, slug])
}

enum DropStep {
    METADATA_UPLOAD
    CREATE_COLLECTION
    CREATE_CANDY_MACHINE
    INSERT_ITEMS
    SAVE_DATA
    LAUNCHED
}

enum DropStatus {
    DRAFT
    PUBLISHED
    ACTIVATED
}
